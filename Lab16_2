using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Runtime.Serialization.Formatters.Soap;
using System.Xml.Serialization;

namespace kpiap16_2
{
    [Serializable]
    public class Program
    {
        [Serializable]
        class Library
        {
            public string name;
            //public List<book> books = new List<book>();
            public Library(string Name)
            {
                name = Name;
            }
            public Library()
            {
            }

            public void print_books()
            {
                //books.ForEach((x) => { Console.WriteLine($"{x.name} {x.year} {x.category}"); });
            }

            public void AddBook(string Name, int Year, string Category)
            {
                //  books.Add(new book(Name, Year, Category));
            }

            public void RemoveBook(string Name, int Year, string Category)
            {
                // books.Remove(new book(Name, Year, Category));
            }

            public void Get_book(int num)
            {
                //var x = books[num];
                //Console.WriteLine($"{x.name} {x.year} {x.category}");
            }

            public void Search_By_Year(int Year)
            {
                // //books.ForEach((x) => {
                //    if (x.year == Year)
                //    {
                //        Console.WriteLine($"{x.name} {x.year} {x.category}");
                //    }
                //});
            }

            public void Search_By_Name(string Name)
            {
                //books.ForEach((x) => {
                //    if (x.name == Name)
                //    {
                //        Console.WriteLine($"{x.name} {x.year} {x.category}");
                //    }
                //});
            }

            public void Search_By_Category(string Category)
            {
                //books.ForEach((x) => {
                //    if (x.category == Category)
                //    {
                //        Console.WriteLine($"{x.name} {x.year} {x.category}");
                //    }
                //});
            }

            public void Serialize()
            {

                FileStream bs = new FileStream("BinFile.dat", FileMode.Create);
                BinaryFormatter Bformatter = new BinaryFormatter();
                try
                {
                    Bformatter.Serialize(bs, this);
                }
                catch (SerializationException e)
                {
                    Console.WriteLine("Failed to serialize. Reason: " + e.Message);
                    throw;
                }

                FileStream sf = new FileStream("SoapFile.soap", FileMode.Create);
                SoapFormatter Sformatter = new SoapFormatter();
                try
                {
                    Sformatter.Serialize(sf, this);
                }
                catch (SerializationException e)
                {
                    Console.WriteLine("Failed to serialize. Reason: " + e.Message);
                    throw;
                }

                FileStream xmlF = new FileStream("XmlFile.xml", FileMode.Create);
                XmlSerializer Fformatter = new XmlSerializer(typeof(Library));
                try
                {
                    Fformatter.Serialize(xmlF, this);
                }
                catch (SerializationException e)
                {
                    Console.WriteLine("Failed to serialize. Reason: " + e.Message);
                    throw;
                }

                Console.WriteLine("Done");
            }

        }
        [Serializable]
        public class book : IEquatable<book>
        {
            public string name;
            public int year;
            public string category;

            public book(string Name, int Year, string Category)
            {
                this.name = Name;
                this.year = Year;
                this.category = Category;
            }
            public bool Equals(book other)
            {
                return name.Equals(other.name);
            }
        }
        static void Main(string[] args)
        {

            var lib = new Library("Flex");
            lib.AddBook("Flex", 1212, "Action");
            lib.AddBook("Fler", 1212, "12");
            lib.AddBook("Flea", 1212, "Action");
            lib.print_books();
            Console.WriteLine();
            lib.print_books();
            Console.WriteLine();
            lib.Get_book(1);
            Console.WriteLine("Test");
            lib.Search_By_Name("Flex");
            lib.Search_By_Category("12");
            lib.Serialize();
            Console.ReadKey();

        }
    }
}
