using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Runtime.Serialization.Formatters.Soap;
using System.Xml.Serialization;

namespace lab10kpiap1part
{
    [Serializable]
    public class Program
    {
        [Serializable]
        public class Mathflex
        {
            public double e;
            public double y;
            public double z;
            public double x;

            public Mathflex() { }
            public Mathflex(double E, double Y, double Z, double X)
            {
                e = E;
                y = Y;
                z = Z;
                x = X;
            }
            double Min()
            {
                double flex = Math.Pow(e, x) + y;
                double chill = y - z;
                return Math.Min(flex, chill);
            }
            double Max()
            {
                double flex = Math.Pow(e, x);
                double chill = y;
                return Math.Max(flex, chill);
            }

            public double Calc()
            {
                return Min() / Max();
            }


            public void Serialize()
            {

                FileStream bs = new FileStream("BinFile.dat", FileMode.Create);
                BinaryFormatter Bformatter = new BinaryFormatter();
                try
                {
                    Bformatter.Serialize(bs, this);
                }
                catch (SerializationException e)
                {
                    Console.WriteLine("Failed to serialize. Reason: " + e.Message);
                    throw;
                }

                FileStream sf = new FileStream("SoapFile.soap", FileMode.Create);
                SoapFormatter Sformatter = new SoapFormatter();
                try
                {
                    Sformatter.Serialize(sf, this);
                }
                catch (SerializationException e)
                {
                    Console.WriteLine("Failed to serialize. Reason: " + e.Message);
                    throw;
                }

                FileStream xmlF = new FileStream("XmlFile.xml", FileMode.Create);
                XmlSerializer Flexformatter = new XmlSerializer(typeof(Mathflex));
                try
                {
                    Flexformatter.Serialize(xmlF, this);
                }
                catch (SerializationException e)
                {
                    Console.WriteLine("Failed to serialize. Reason: " + e.Message);
                    throw;
                }

                Console.WriteLine("Done");
            }
        }
        static void Main(string[] args)
        {
            var flex = new Mathflex(2, 5, 4, 3);
            Console.WriteLine(flex.Calc());
            flex.Serialize();
            Console.ReadLine();
        }
    }
}
